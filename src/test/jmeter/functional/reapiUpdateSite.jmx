<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ReapiGetPerson" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables " enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,,runscope-auto.staging.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__property(port,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,,complex)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeout_ms" elementType="Argument">
            <stringProp name="Argument.name">timeout_ms</stringProp>
            <stringProp name="Argument.value">${__property(timeout_ms,,20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version1" elementType="Argument">
            <stringProp name="Argument.name">version1</stringProp>
            <stringProp name="Argument.value">${__property(version1,,2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version2" elementType="Argument">
            <stringProp name="Argument.name">version2</stringProp>
            <stringProp name="Argument.value">${__property(version2,,2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version3" elementType="Argument">
            <stringProp name="Argument.name">version3</stringProp>
            <stringProp name="Argument.value">${__property(version3,,2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version4" elementType="Argument">
            <stringProp name="Argument.name">version4</stringProp>
            <stringProp name="Argument.value">${__property(version4,,2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version5" elementType="Argument">
            <stringProp name="Argument.name">version5</stringProp>
            <stringProp name="Argument.value">${__property(version5,,2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteUpdateHost" elementType="Argument">
            <stringProp name="Argument.name">siteUpdateHost</stringProp>
            <stringProp name="Argument.value">${__property(siteUpdateHost,,runscope-site.staging.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteName1" elementType="Argument">
            <stringProp name="Argument.name">siteName1</stringProp>
            <stringProp name="Argument.value">${__property(siteName1,,randomSite-2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteName2" elementType="Argument">
            <stringProp name="Argument.name">siteName2</stringProp>
            <stringProp name="Argument.value">${__property(siteName2,,randomSite-2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteName3" elementType="Argument">
            <stringProp name="Argument.name">siteName3</stringProp>
            <stringProp name="Argument.value">${__property(siteName3,,randomSite-2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteName4" elementType="Argument">
            <stringProp name="Argument.name">siteName4</stringProp>
            <stringProp name="Argument.value">${__property(siteName4,,randomSite-2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteName5" elementType="Argument">
            <stringProp name="Argument.name">siteName5</stringProp>
            <stringProp name="Argument.value">${__property(siteName5,,RandomSite-2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${siteUpdateHost}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">xMatters/535.0.10 CFNetwork/672.1.15 Darwin/14.0.0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Site Update - Version(2012-03-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Site- Happy Case - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;


String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

//String xyz = vars.get(&quot;siteidentifier&quot;);

int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));

JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2012-03-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Status invalid - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;xxxx&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/status&quot;);
errorDetails.add(&quot;details&quot;, &quot;[xxxx] is not a valid site status. Valid values are Active and Inactive.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Language is not present in the company - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;Eng&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/language&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Eng] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Timezone not in the list. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific1&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/timezone&quot;);
errorDetails.add(&quot;details&quot;, &quot;[US/Pacific1] is not a valid timezone for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster not present. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;Horrible&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/cluster&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Horrible] is not a site cluster for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address1 field have more than 100 characters - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd , 12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address1&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address2 field have more than 100 characters - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd &quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address2&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city contains more than 100 characters. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon San Ramon San Ramon San Ramon San Ramon  San Ramon  San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon &quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/city&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="state name longer than 100 characters - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California California California California California California California California California California  California California California California California  California California California California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/state&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country not in the list - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/country&quot;);
errorDetails.add(&quot;details&quot;, &quot;[United States1] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="postalCode longer than 100 characters. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/postalCode&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 10 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="latitude greater than 90. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;100&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/latitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 90.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="longitude  greater than 360. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;90&quot;,&#xd;
&quot;longitude&quot;: &quot;390&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/longitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 180.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with invalid field names. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;,&#xd;
&quot;foo&quot;: &quot;Active&quot;,&#xd;
&quot;ybbidy&quot;: &quot;English&quot;,&#xd;
&quot;yabbidy&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails1 = new JsonObject();
errorDetails1.add(&quot;jsonPath&quot;, &quot;sites/foo&quot;);
errorDetails1.add(&quot;details&quot;, &quot;The field foo in the request body is unrecognized.&quot;);

JsonObject errorDetails2 = new JsonObject();
errorDetails2.add(&quot;jsonPath&quot;, &quot;sites/ybbidy&quot;);
errorDetails2.add(&quot;details&quot;, &quot;The field ybbidy in the request body is unrecognized.&quot;);

JsonObject errorDetails3 = new JsonObject();
errorDetails3.add(&quot;jsonPath&quot;, &quot;sites/yabbidy&quot;);
errorDetails3.add(&quot;details&quot;, &quot;The field yabbidy in the request body is unrecognized.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails1);
expectedData.add(errorDetails2);
expectedData.add(errorDetails3);



JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with omitted Name. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));

JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2012-03-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site using a URL for a non-existent Site. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/bobo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/name&quot;);
errorDetails.add(&quot;details&quot;, &quot;The site \&quot;bobo\&quot; cannot be updated because it does not exist. Site names may not contain all whitespace characters.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with no body data. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with malformed request body. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with insufficient permissions. - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName1}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;179&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${siteName1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;CustomUser:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: POST /reapi/${version1}/sites/randomSite-2012-03-01&quot;);


log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Site Update - Version(2013-12-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Site- Happy Case - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2013-12-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Status invalid - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;xxxx&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/status&quot;);
errorDetails.add(&quot;details&quot;, &quot;[xxxx] is not a valid site status. Valid values are Active and Inactive.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Language is not present in the company - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;Eng&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/language&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Eng] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Timezone not in the list. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific1&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/timezone&quot;);
errorDetails.add(&quot;details&quot;, &quot;[US/Pacific1] is not a valid timezone for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster not present. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;Horrible&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/cluster&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Horrible] is not a site cluster for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address1 field have more than 100 characters - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd , 12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address1&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address2 field have more than 100 characters - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd &quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address2&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city contains more than 100 characters. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon San Ramon San Ramon San Ramon San Ramon  San Ramon  San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon &quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/city&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="state name longer than 100 characters - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California California California California California California California California California California  California California California California California  California California California California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/state&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country not in the list - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/country&quot;);
errorDetails.add(&quot;details&quot;, &quot;[United States1] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="postalCode longer than 100 characters. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/postalCode&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 10 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="latitude greater than 90. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;100&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/latitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 90.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="longitude  greater than 360. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;90&quot;,&#xd;
&quot;longitude&quot;: &quot;390&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/longitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 180.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with invalid field names. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;,&#xd;
&quot;foo&quot;: &quot;Active&quot;,&#xd;
&quot;ybbidy&quot;: &quot;English&quot;,&#xd;
&quot;yabbidy&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails1 = new JsonObject();
errorDetails1.add(&quot;jsonPath&quot;, &quot;sites/foo&quot;);
errorDetails1.add(&quot;details&quot;, &quot;The field foo in the request body is unrecognized.&quot;);

JsonObject errorDetails2 = new JsonObject();
errorDetails2.add(&quot;jsonPath&quot;, &quot;sites/ybbidy&quot;);
errorDetails2.add(&quot;details&quot;, &quot;The field ybbidy in the request body is unrecognized.&quot;);

JsonObject errorDetails3 = new JsonObject();
errorDetails3.add(&quot;jsonPath&quot;, &quot;sites/yabbidy&quot;);
errorDetails3.add(&quot;details&quot;, &quot;The field yabbidy in the request body is unrecognized.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails1);
expectedData.add(errorDetails2);
expectedData.add(errorDetails3);



JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with omitted Name. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2013-12-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site using a URL for a non-existent Site. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/bobo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/name&quot;);
errorDetails.add(&quot;details&quot;, &quot;The site \&quot;bobo\&quot; cannot be updated because it does not exist. Site names may not contain all whitespace characters.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with no body data. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with malformed request body. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with insufficient permissions. - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName2}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;179&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${siteName2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;CustomUser:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: POST /reapi/${version2}/sites/randomSite-2013-12-01&quot;);


log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Site Update - Version(2014-06-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Site- Happy Case - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2014-06-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Status invalid - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;xxxx&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/status&quot;);
errorDetails.add(&quot;details&quot;, &quot;[xxxx] is not a valid site status. Valid values are Active and Inactive.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Language is not present in the company - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;Eng&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/language&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Eng] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Timezone not in the list. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific1&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/timezone&quot;);
errorDetails.add(&quot;details&quot;, &quot;[US/Pacific1] is not a valid timezone for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster not present. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;Horrible&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/cluster&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Horrible] is not a site cluster for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address1 field have more than 100 characters - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd , 12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address1&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address2 field have more than 100 characters - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd &quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address2&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city contains more than 100 characters. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon San Ramon San Ramon San Ramon San Ramon  San Ramon  San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon &quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">																																																																																					</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/city&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="state name longer than 100 characters - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California California California California California California California California California California  California California California California California  California California California California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/state&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country not in the list - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/country&quot;);
errorDetails.add(&quot;details&quot;, &quot;[United States1] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="postalCode longer than 100 characters. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/postalCode&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 10 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="latitude greater than 90. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;100&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/latitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 90.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="longitude  greater than 360. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;90&quot;,&#xd;
&quot;longitude&quot;: &quot;390&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/longitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 180.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with invalid field names. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;,&#xd;
&quot;foo&quot;: &quot;Active&quot;,&#xd;
&quot;ybbidy&quot;: &quot;English&quot;,&#xd;
&quot;yabbidy&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails1 = new JsonObject();
errorDetails1.add(&quot;jsonPath&quot;, &quot;sites/foo&quot;);
errorDetails1.add(&quot;details&quot;, &quot;The field foo in the request body is unrecognized.&quot;);

JsonObject errorDetails2 = new JsonObject();
errorDetails2.add(&quot;jsonPath&quot;, &quot;sites/ybbidy&quot;);
errorDetails2.add(&quot;details&quot;, &quot;The field ybbidy in the request body is unrecognized.&quot;);

JsonObject errorDetails3 = new JsonObject();
errorDetails3.add(&quot;jsonPath&quot;, &quot;sites/yabbidy&quot;);
errorDetails3.add(&quot;details&quot;, &quot;The field yabbidy in the request body is unrecognized.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails1);
expectedData.add(errorDetails2);
expectedData.add(errorDetails3);



JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with omitted Name. -  v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2014-06-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site using a URL for a non-existent Site. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/bobo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/name&quot;);
errorDetails.add(&quot;details&quot;, &quot;The site \&quot;bobo\&quot; cannot be updated because it does not exist. Site names may not contain all whitespace characters.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with no body data. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with malformed request body. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with insufficient permissions. - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName3}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;179&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${siteName3}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;CustomUser:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: POST /reapi/${version3}/sites/randomSite-2014-06-01&quot;);


log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Site Update - Version(2015-01-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Site- Happy Case - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2015-01-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Status invalid - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;xxxx&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/status&quot;);
errorDetails.add(&quot;details&quot;, &quot;[xxxx] is not a valid site status. Valid values are Active and Inactive.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Language is not present in the company - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;Eng&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/language&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Eng] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Site Timezone not in the list. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific1&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/timezone&quot;);
errorDetails.add(&quot;details&quot;, &quot;[US/Pacific1] is not a valid timezone for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster not present. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;Horrible&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/cluster&quot;);
errorDetails.add(&quot;details&quot;, &quot;[Horrible] is not a site cluster for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address1 field have more than 100 characters - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd , 12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address1&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address2 field have more than 100 characters - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd 12647 Alcosta Blvd &quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/address2&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="city contains more than 100 characters. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon San Ramon San Ramon San Ramon San Ramon  San Ramon  San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon San Ramon &quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">																																																																																					</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/city&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="state name longer than 100 characters - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California California California California California California California California California California  California California California California California  California California California California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/state&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 100 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country not in the list - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/country&quot;);
errorDetails.add(&quot;details&quot;, &quot;[United States1] has not been configured for this company.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="postalCode longer than 100 characters. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583945839458394583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/postalCode&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum length of 10 characters&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="latitude greater than 90. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;100&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/latitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 90.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="longitude  greater than 360. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;90&quot;,&#xd;
&quot;longitude&quot;: &quot;390&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/longitude&quot;);
errorDetails.add(&quot;details&quot;, &quot;Exceeded maximum limit of 180.0&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with invalid field names. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;,&#xd;
&quot;foo&quot;: &quot;Active&quot;,&#xd;
&quot;ybbidy&quot;: &quot;English&quot;,&#xd;
&quot;yabbidy&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails1 = new JsonObject();
errorDetails1.add(&quot;jsonPath&quot;, &quot;sites/foo&quot;);
errorDetails1.add(&quot;details&quot;, &quot;The field foo in the request body is unrecognized.&quot;);

JsonObject errorDetails2 = new JsonObject();
errorDetails2.add(&quot;jsonPath&quot;, &quot;sites/ybbidy&quot;);
errorDetails2.add(&quot;details&quot;, &quot;The field ybbidy in the request body is unrecognized.&quot;);

JsonObject errorDetails3 = new JsonObject();
errorDetails3.add(&quot;jsonPath&quot;, &quot;sites/yabbidy&quot;);
errorDetails3.add(&quot;details&quot;, &quot;The field yabbidy in the request body is unrecognized.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails1);
expectedData.add(errorDetails2);
expectedData.add(errorDetails3);



JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with omitted Name. -  v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int xyz = Integer.parseInt(vars.get(&quot;siteidentifier&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, xyz);
expectedSite.add(&quot;name&quot;, &quot;randomSite-2015-01-01&quot;);
expectedSite.add(&quot;status&quot;, &quot;Active&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
expectedSite.add(&quot;address2&quot;, &quot;&quot;);
expectedSite.add(&quot;city&quot;, &quot;San Ramon&quot;);
expectedSite.add(&quot;state&quot;, &quot;California&quot;);
expectedSite.add(&quot;country&quot;, &quot;United States&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;94583&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteidentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;identifier&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site using a URL for a non-existent Site. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd&quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States&quot;,&#xd;
&quot;postalCode&quot;: &quot;94583&quot;,&#xd;
&quot;latitude&quot;: &quot;&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/bobo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;sites/name&quot;);
errorDetails.add(&quot;details&quot;, &quot;The site \&quot;bobo\&quot; cannot be updated because it does not exist. Site names may not contain all whitespace characters.&quot;);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;There are data validation errors in the form.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with no body data. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with malformed request body. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

String jsonString = prev.getResponseDataAsString();
JsonObject errorData = JsonObject.readFrom(jsonString);
JsonArray siteHref = errorData.get(&quot;errorDetails&quot;).asArray();
String path = siteHref.get(0).asObject().get(&quot;details&quot;).asString();
vars.put(&quot;detailsfound&quot;, path)</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

String test = vars.get(&quot;detailsfound&quot;);

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject errorDetails = new JsonObject();
errorDetails.add(&quot;jsonPath&quot;, &quot;$&quot;);
errorDetails.add(&quot;details&quot;, test);

JsonArray expectedData = new JsonArray();
expectedData.add(errorDetails);


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;DATA_FORMAT_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;Request data is malformed and cannot be parsed.&quot;);
ResponseData.add(&quot;errorDetails&quot;, expectedData);

log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 400" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="370401607">X-Rate-Limit-Org-Name: runscope-site</stringProp>
              <stringProp name="-1049897010">X-Rate-Limit-Resource: sitesPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST update Site with insufficient permissions. - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;name&quot;: &quot;${siteName4}&quot;&#xd;
&quot;status&quot;: &quot;Active&quot;,&#xd;
&quot;language&quot;: &quot;English&quot;,&#xd;
&quot;timezone&quot;: &quot;US/Pacific&quot;,&#xd;
&quot;cluster&quot;: &quot;&quot;,&#xd;
&quot;address1&quot;: &quot;12647 Alcosta Blvd &quot;,&#xd;
&quot;address2&quot;: &quot;&quot;,&#xd;
&quot;city&quot;: &quot;San Ramon&quot;,&#xd;
&quot;state&quot;: &quot;California&quot;,&#xd;
&quot;country&quot;: &quot;United States1&quot;,&#xd;
&quot;postalCode&quot;: &quot;9458&quot;,&#xd;
&quot;latitude&quot;: &quot;85&quot;,&#xd;
&quot;longitude&quot;: &quot;179&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${siteUpdateHost}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${siteName4}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;CustomUser:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object


JsonObject ResponseData = new JsonObject();
ResponseData.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
ResponseData.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: POST /reapi/${version5}/sites/randomSite-2015-01-01&quot;);


log.info(&quot;Here is the expect JSON: &quot; + ResponseData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(ResponseData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
