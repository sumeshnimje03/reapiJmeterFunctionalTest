<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="reapiPredefineResponseOptions" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,,runscope-auto.master.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__property(port,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,,complex)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeout_ms" elementType="Argument">
            <stringProp name="Argument.name">timeout_ms</stringProp>
            <stringProp name="Argument.value">${__property(timeout_ms,,20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version1" elementType="Argument">
            <stringProp name="Argument.name">version1</stringProp>
            <stringProp name="Argument.value">${__property(version1,,2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version2" elementType="Argument">
            <stringProp name="Argument.name">version2</stringProp>
            <stringProp name="Argument.value">${__property(version2,,2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version3" elementType="Argument">
            <stringProp name="Argument.name">version3</stringProp>
            <stringProp name="Argument.value">${__property(version3,,2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version4" elementType="Argument">
            <stringProp name="Argument.name">version4</stringProp>
            <stringProp name="Argument.value">${__property(version4,,2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version5" elementType="Argument">
            <stringProp name="Argument.name">version5</stringProp>
            <stringProp name="Argument.value">${__property(version5,,2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Disaster" elementType="Argument">
            <stringProp name="Argument.name">Disaster</stringProp>
            <stringProp name="Argument.value">${__property(Disaster,,0dc17ad4-cd81-433c-b396-128930d954e4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="recipient" elementType="Argument">
            <stringProp name="Argument.name">recipient</stringProp>
            <stringProp name="Argument.value">${__property(recipient,,user11)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-01" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-01</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-01,,3e2398bf-6e20-45d0-b05b-125877792ca2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-02" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-02</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-02,,85385321-d5b0-49d2-9b21-7c137edc68cb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-03" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-03</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-03,,94498903-c7a5-4648-bfc1-1e050411eb8d)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-04" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-04</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-04,,48adf636-8297-4a5b-b8c8-1a5a16a00dab)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-05" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-05</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-05,,785fe70c-79ea-4005-b42b-8ebc080d0914)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseUUID-06" elementType="Argument">
            <stringProp name="Argument.name">responseUUID-06</stringProp>
            <stringProp name="Argument.value">${__property(responseUUID-06,,a11102df-b399-487e-9d17-fab99a62e1be)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">xMatters/535.0.10 CFNetwork/672.1.15 Darwin/14.0.0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Predefine Response Options - (Version: 2015-04-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-01 Invalid Respone UUID v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [ &quot;Level 1&quot;,&quot;H1&quot;],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [ &quot;List2&quot;],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [{ &quot;targetName&quot;: &quot;${recipient}&quot;}],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455&quot;,&#xd;
            &quot;3dc152dd-de7a-4bfd-8f67-927b373680b6&quot;,&#xd;
            &quot;94b2f70c-a777-4249-bea9-9c961cadbfae&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 400" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Response e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455 is invalid.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-02 Valid Response UUID v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [&#xd;
      &quot;Level 1&quot;,&#xd;
      &quot;H1&quot;&#xd;
    ],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [&#xd;
      &quot;List2&quot;&#xd;
    ],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [&#xd;
    {&#xd;
      &quot;targetName&quot;: &quot;${recipient}&quot;&#xd;
    }&#xd;
  ],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;${responseUUID-01}&quot;,&#xd;
            &quot;${responseUUID-02}&quot;,&#xd;
              &quot;${responseUUID-03}&quot;,&#xd;
              &quot;${responseUUID-04}&quot;,&#xd;
               &quot;${responseUUID-05}&quot;,&#xd;
                &quot;${responseUUID-06}&quot;,&#xd;
                 &quot;${responseUUID-06}&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">eventID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ID Comparison" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;eventID&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Predefine Response Options - (Version: 2015-01-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-01 Invalid Respone UUID v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [ &quot;Level 1&quot;,&quot;H1&quot;],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [ &quot;List2&quot;],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [{ &quot;targetName&quot;: &quot;${recipient}&quot;}],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455&quot;,&#xd;
            &quot;3dc152dd-de7a-4bfd-8f67-927b373680b6&quot;,&#xd;
            &quot;94b2f70c-a777-4249-bea9-9c961cadbfae&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 400" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Response e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455 is invalid.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-02 Valid Response UUID v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [&#xd;
      &quot;Level 1&quot;,&#xd;
      &quot;H1&quot;&#xd;
    ],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [&#xd;
      &quot;List2&quot;&#xd;
    ],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [&#xd;
    {&#xd;
      &quot;targetName&quot;: &quot;${recipient}&quot;&#xd;
    }&#xd;
  ],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;${responseUUID-01}&quot;,&#xd;
            &quot;${responseUUID-02}&quot;,&#xd;
              &quot;${responseUUID-03}&quot;,&#xd;
              &quot;${responseUUID-04}&quot;,&#xd;
               &quot;${responseUUID-05}&quot;,&#xd;
                &quot;${responseUUID-06}&quot;,&#xd;
                 &quot;${responseUUID-06}&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">eventID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ID Comparison" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;eventID&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Predefine Response Options - (Version: 2014-06-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-01 Invalid Respone UUID  v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [ &quot;Level 1&quot;,&quot;H1&quot;],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [ &quot;List2&quot;],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [{ &quot;targetName&quot;: &quot;${recipient}&quot;}],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455&quot;,&#xd;
            &quot;3dc152dd-de7a-4bfd-8f67-927b373680b6&quot;,&#xd;
            &quot;94b2f70c-a777-4249-bea9-9c961cadbfae&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 400" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Response e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455 is invalid.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-02 Valid Response UUID v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [&#xd;
      &quot;Level 1&quot;,&#xd;
      &quot;H1&quot;&#xd;
    ],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [&#xd;
      &quot;List2&quot;&#xd;
    ],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [&#xd;
    {&#xd;
      &quot;targetName&quot;: &quot;${recipient}&quot;&#xd;
    }&#xd;
  ],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
           &quot;${responseUUID-01}&quot;,&#xd;
            &quot;${responseUUID-02}&quot;,&#xd;
              &quot;${responseUUID-03}&quot;,&#xd;
              &quot;${responseUUID-04}&quot;,&#xd;
               &quot;${responseUUID-05}&quot;,&#xd;
                &quot;${responseUUID-06}&quot;,&#xd;
                 &quot;${responseUUID-06}&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">eventID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ID Comparison" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;eventID&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Predefine Response Options - (Version: 2013-12-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-01 Invalid Respone UUID v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [ &quot;Level 1&quot;,&quot;H1&quot;],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [ &quot;List2&quot;],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [{ &quot;targetName&quot;: &quot;${recipient}&quot;}],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455&quot;,&#xd;
            &quot;3dc152dd-de7a-4bfd-8f67-927b373680b6&quot;,&#xd;
            &quot;94b2f70c-a777-4249-bea9-9c961cadbfae&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 400" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Response e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455 is invalid.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-02 Valid Response UUID v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [&#xd;
      &quot;Level 1&quot;,&#xd;
      &quot;H1&quot;&#xd;
    ],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [&#xd;
      &quot;List2&quot;&#xd;
    ],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [&#xd;
    {&#xd;
      &quot;targetName&quot;: &quot;${recipient}&quot;&#xd;
    }&#xd;
  ],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;${responseUUID-01}&quot;,&#xd;
            &quot;${responseUUID-02}&quot;,&#xd;
              &quot;${responseUUID-03}&quot;,&#xd;
              &quot;${responseUUID-04}&quot;,&#xd;
               &quot;${responseUUID-05}&quot;,&#xd;
                &quot;${responseUUID-06}&quot;,&#xd;
                 &quot;${responseUUID-06}&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">eventID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ID Comparison" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;eventID&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Predefine Response Options - (Version: 2012-03-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-01 Invalid Respone UUID v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [ &quot;Level 1&quot;,&quot;H1&quot;],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [ &quot;List2&quot;],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [{ &quot;targetName&quot;: &quot;${recipient}&quot;}],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455&quot;,&#xd;
            &quot;3dc152dd-de7a-4bfd-8f67-927b373680b6&quot;,&#xd;
            &quot;94b2f70c-a777-4249-bea9-9c961cadbfae&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 400" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2117236020">Bad Request</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;DATA_VALIDATION_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Response e4f1aa08-159c-4d2e-a7ab-fc2a7dff0455 is invalid.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event-02 Valid Response UUID v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;Hierarchy&quot;: [&#xd;
      &quot;Level 1&quot;,&#xd;
      &quot;H1&quot;&#xd;
    ],&#xd;
    &quot;password&quot;: &quot;testpassword&quot;,&#xd;
    &quot;List&quot;: [&#xd;
      &quot;List2&quot;&#xd;
    ],&#xd;
    &quot;text&quot;: &quot;&quot;,&#xd;
    &quot;Combo&quot;: &quot;Value C and Value D&quot;,&#xd;
    &quot;number&quot;: -1,&#xd;
    &quot;bol&quot;: &quot;true&quot;&#xd;
  },&#xd;
  &quot;recipients&quot;: [&#xd;
    {&#xd;
      &quot;targetName&quot;: &quot;${recipient}&quot;&#xd;
    }&#xd;
  ],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
 &quot;responses&quot;:&#xd;
        [&#xd;
            &quot;${responseUUID-01}&quot;,&#xd;
            &quot;${responseUUID-02}&quot;,&#xd;
              &quot;${responseUUID-03}&quot;,&#xd;
              &quot;${responseUUID-04}&quot;,&#xd;
               &quot;${responseUUID-05}&quot;,&#xd;
                &quot;${responseUUID-06}&quot;,&#xd;
                 &quot;${responseUUID-06}&quot;&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="1550014424">X-Rate-Limit-Resource: FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">eventID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ID Comparison" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;eventID&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
