<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ReapiGetPerson" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables " enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,,runscope-auto.staging.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__property(port,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,,complex)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeout_ms" elementType="Argument">
            <stringProp name="Argument.name">timeout_ms</stringProp>
            <stringProp name="Argument.value">${__property(timeout_ms,,20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version1" elementType="Argument">
            <stringProp name="Argument.name">version1</stringProp>
            <stringProp name="Argument.value">${__property(version1,,2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version2" elementType="Argument">
            <stringProp name="Argument.name">version2</stringProp>
            <stringProp name="Argument.value">${__property(version2,,2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version3" elementType="Argument">
            <stringProp name="Argument.name">version3</stringProp>
            <stringProp name="Argument.value">${__property(version3,,2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version4" elementType="Argument">
            <stringProp name="Argument.name">version4</stringProp>
            <stringProp name="Argument.value">${__property(version4,,2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version5" elementType="Argument">
            <stringProp name="Argument.name">version5</stringProp>
            <stringProp name="Argument.value">${__property(version5,,2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminUUID" elementType="Argument">
            <stringProp name="Argument.name">adminUUID</stringProp>
            <stringProp name="Argument.value">${__property(personUUID,,b892f940-e47d-40eb-8faf-72d738c9ca44)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userUUID-01" elementType="Argument">
            <stringProp name="Argument.name">userUUID-01</stringProp>
            <stringProp name="Argument.value">${__property(userUUID-01,,4b6a908a-4552-4eb2-a8c3-def5db628d21)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userUUID-02" elementType="Argument">
            <stringProp name="Argument.name">userUUID-02</stringProp>
            <stringProp name="Argument.value">${__property(userUUID-02,,9e23c0c8-9407-4eea-ab9d-de1955165d78)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DefaultSite-UUID" elementType="Argument">
            <stringProp name="Argument.name">DefaultSite-UUID</stringProp>
            <stringProp name="Argument.value">${__property(DefaultSite-UUID,,b5e81aad-56d9-451c-95a2-ede3803a2c19)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DefaultSite-ID" elementType="Argument">
            <stringProp name="Argument.name">DefaultSite-ID</stringProp>
            <stringProp name="Argument.value">${__property(DefaultSite-ID,,200122)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">xMatters/535.0.10 CFNetwork/672.1.15 Darwin/14.0.0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET Person - Version(2012-03-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/people/admin</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
//${protocol}://${host}/reapi/${version1}/sites/200122

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;${protocol}://${host}/reapi/${version1}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;${protocol}://${host}/reapi/${version1}/people/admin/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="319153859">X-Rate-Limit-Resource: personGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not authenticated (401)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not authenticated (401) - v${version1}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version1}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:401" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51509">401</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="785231124">Unauthorized</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User without permissions (403) " enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User without permissions (403) - v${version1}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version1}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: admin&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not found (404)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:complex&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not found (404) - v${version1}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version1}/people/DoNotExist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person DoNotExist does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through User ID - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;${protocol}://${host}/reapi/${version1}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;${protocol}://${host}/reapi/${version1}/people/userid/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;User&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Person&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;webid&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, JsonValue.NULL);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through Web ID - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/people/webid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person webid does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is supervisor of the user - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;persup:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making call is not the supervisor of the user - v${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/people/email</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: email&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET Person - Version(2013-12-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/admin</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
//${protocol}://${host}/reapi/${version1}/sites/200122

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version2}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version2}/people/admin/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="319153859">X-Rate-Limit-Resource: personGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not authenticated (401)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not authenticated (401) - v${version2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version2}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:401" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51509">401</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="785231124">Unauthorized</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User without permissions (403)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User without permissions (403) - v${version2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version2}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: admin&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not found (404)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:complex&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not found (404) - v${version2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version2}/people/DoNotExist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person DoNotExist does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through User ID - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version2}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version2}/people/userid/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;User&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Person&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;webid&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, JsonValue.NULL);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through Web ID - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/webid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person webid does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is supervisor of the user - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;persup:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making call is not the supervisor of the user - v${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/email</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: email&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET Person - Version(2014-06-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/people/admin</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
//${protocol}://${host}/reapi/${version1}/sites/200122

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version3}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version3}/people/admin/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${adminUUID}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="319153859">X-Rate-Limit-Resource: personGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not authenticated (401)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not authenticated (401) - v${version3}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version3}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:401" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51509">401</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="785231124">Unauthorized</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User without permissions (403)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User without permissions (403) - v${version3}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version3}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: admin&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not found (404)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:complex&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not found (404) - v${version3}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version3}/people/DoNotExist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person DoNotExist does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through User ID - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="user identifier extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">userIdentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.+?)&quot;.&quot;shortName&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version3}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version3}/people/userid/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${userIdentifier}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;User&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Person&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;webid&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, JsonValue.NULL);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through Web ID - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/people/webid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person webid does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is supervisor of the user - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;persup:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making call is not the supervisor of the user - v${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/people/email</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: email&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET Person - Version(2015-01-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460522516000</longProp>
        <longProp name="ThreadGroup.end_time">1460522516000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/people/admin</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="site reference url extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteRefURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;href&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
//${protocol}://${host}/reapi/${version1}/sites/200122

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version4}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version4}/people/admin/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${adminUUID}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="319153859">X-Rate-Limit-Resource: personGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not authenticated (401)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not authenticated (401) - v${version4}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version4}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:401" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51509">401</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="785231124">Unauthorized</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User without permissions (403)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User without permissions (403) - v${version4}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version4}/people/admin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: admin&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion:403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User not found (404)" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:complex&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User not found (404) - v${version4}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version4}/people/DoNotExist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person DoNotExist does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through User ID - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="user identifier extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">userIdentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.+?)&quot;.&quot;shortName&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version4}/sites/${DefaultSite-ID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version4}/people/userid/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${userIdentifier}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;User&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Person&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;webid&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, JsonValue.NULL);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user through Web ID - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/people/webid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person webid does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is supervisor of the user - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/people/userid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;persup:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making call is not the supervisor of the user - v${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/people/email</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: email&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET Person by UUID - Version(2015-04-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460526760000</longProp>
        <longProp name="ThreadGroup.end_time">1460526760000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${adminUUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version5}/sites/${DefaultSite-UUID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/2015-04-01/people/${adminUUID}/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${adminUUID}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
    Failure = true;
    FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET person call with a user ID using the old REST API - v${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/people/admin</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="site reference url extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">siteRefURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;href&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;${siteRefURL}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version2}/people/admin/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;Runscope&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Automation&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;admin&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, &quot;599229&quot;);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
    Failure = true;
    FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET person call with an invalid UUID - v${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/people/221e14f9-3e13-4cb8-a2cf</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person 221e14f9-3e13-4cb8-a2cf does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET person call with a UUID of a person that has been deleted - v${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/people/520ff8ef-7da7-40ba-ac0e-1ebc35354e39</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;Person 520ff8ef-7da7-40ba-ac0e-1ebc35354e39 does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is company admin - v${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${userUUID-01}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="user identifier extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">userIdentifier</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.+?)&quot;.&quot;shortName&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object

String expectedName = &quot;Default Site&quot;;
String siteRef = &quot;/reapi/${version5}/sites/${DefaultSite-UUID}&quot;;
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;name&quot;, expectedName);
expectedSite.add(&quot;href&quot;, siteRef);


String profileLink = &quot;/reapi/${version5}/people/${userIdentifier}/profiles&quot;;
JsonObject expectedProfile = new JsonObject();
expectedProfile.add(&quot;href&quot;, profileLink);

JsonObject expectedPerson = new JsonObject();
expectedPerson.add(&quot;identifier&quot;, &quot;${userIdentifier}&quot;);
expectedPerson.add(&quot;shortName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;targetName&quot;, &quot;userid&quot;);
expectedPerson.add(&quot;firstName&quot;, &quot;User&quot;);
expectedPerson.add(&quot;lastName&quot;, &quot;Person&quot;);
expectedPerson.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedPerson.add(&quot;language&quot;, &quot;en&quot;);
expectedPerson.add(&quot;timezone&quot;, &quot;US/Eastern&quot;);
expectedPerson.add(&quot;externallyOwned&quot;, false);
expectedPerson.add(&quot;externalKey&quot;, JsonValue.NULL);
expectedPerson.add(&quot;webLogin&quot;, &quot;webid&quot;);
expectedPerson.add(&quot;phoneLogin&quot;, JsonValue.NULL);
expectedPerson.add(&quot;site&quot;, expectedSite);
expectedPerson.add(&quot;profiles&quot;, expectedProfile);


log.info(&quot;Here is the expect JSON: &quot; + expectedPerson.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedPerson.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="GET person with incorrect credentials." enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Incorrect Credentials" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET person with incorrect credentials. - v${version5}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${adminUUID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51509">401</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="785231124">Unauthorized</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="GET person with an unauthorized user" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Unauthorized User" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET person with an unauthorized user - v${version5}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${adminUUID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);
// Build the expected JSON and print it out as a string
// First build the expectedSite object
JsonObject expectedResponse = new JsonObject();
expectedResponse.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedResponse.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: ${adminUUID}&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedResponse.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedResponse.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-787432487">Forbidden</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Get person based on Supervisor permission" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Supervisor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;persup:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making a call is supervisor of the user - v${version5}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${userUUID-01}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User that is making call is not the supervisor of the user - v${version5}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/reapi/${version5}/people/${userUUID-02}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51511">403</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-787432487">Forbidden</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
