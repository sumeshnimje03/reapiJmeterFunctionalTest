<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="reapiGetSitesByUUID" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,,runscope-auto.staging.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,,complex)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version5" elementType="Argument">
            <stringProp name="Argument.name">version5</stringProp>
            <stringProp name="Argument.value">${__property(version5,,2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version4" elementType="Argument">
            <stringProp name="Argument.name">version4</stringProp>
            <stringProp name="Argument.value">${__property(version4,,2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version3" elementType="Argument">
            <stringProp name="Argument.name">version3</stringProp>
            <stringProp name="Argument.value">${__property(version3,,2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version2" elementType="Argument">
            <stringProp name="Argument.name">version2</stringProp>
            <stringProp name="Argument.value">${__property(version2,,2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version1" elementType="Argument">
            <stringProp name="Argument.name">version1</stringProp>
            <stringProp name="Argument.value">${__property(version1,,2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeout_ms" elementType="Argument">
            <stringProp name="Argument.name">timeout_ms</stringProp>
            <stringProp name="Argument.value">${__property(timeout_ms,,20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,port)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DefaultSite-ID" elementType="Argument">
            <stringProp name="Argument.name">DefaultSite-ID</stringProp>
            <stringProp name="Argument.value">${__property(DefaultSite-ID,,200122)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DefaultSite-UUID" elementType="Argument">
            <stringProp name="Argument.name">DefaultSite-UUID</stringProp>
            <stringProp name="Argument.value">${__property(DefaultSite-UUID,,b5e81aad-56d9-451c-95a2-ede3803a2c19)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">xMatters/535.0.10 CFNetwork/672.1.15 Darwin/14.0.0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GETSitesByUUID - (Version: 2015-04-01) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460528107000</longProp>
        <longProp name="ThreadGroup.end_time">1460528107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 100" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site100ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;([^,:]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">100</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NRURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Data Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-691626026">&quot;total&quot;:&quot;103&quot;</stringProp>
              <stringProp name="971727103">&quot;nextRecordsURL&quot;:&quot;/reapi/${version5}/sites?startAfterSite=${site100ID}&quot;</stringProp>
              <stringProp name="-1225651850">&quot;Default Site&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;language&quot;:&quot;English&quot;,&quot;timezone&quot;:&quot;Asia/Calcutta&quot;,&quot;cluster&quot;:&quot;&quot;,&quot;address1&quot;:&quot;sector 62&quot;,&quot;address2&quot;:&quot;noide&quot;,&quot;city&quot;:&quot;UP&quot;,&quot;state&quot;:&quot;&quot;,&quot;country&quot;:&quot;India&quot;,&quot;postalCode&quot;:&quot;4356&quot;,&quot;latitude&quot;:&quot;28.6197948&quot;,&quot;longitude&quot;:&quot;77.36115489999997&quot;}</stringProp>
              <stringProp name="-1179961152">&quot;name&quot;:&quot;Site 2&quot;,</stringProp>
              <stringProp name="-1179960191">&quot;name&quot;:&quot;Site 3&quot;,</stringProp>
              <stringProp name="-1179959230">&quot;name&quot;:&quot;Site 4&quot;,</stringProp>
              <stringProp name="-1179958269">&quot;name&quot;:&quot;Site 5&quot;,</stringProp>
              <stringProp name="-1179957308">&quot;name&quot;:&quot;Site 6&quot;,</stringProp>
              <stringProp name="-1179956347">&quot;name&quot;:&quot;Site 7&quot;,</stringProp>
              <stringProp name="-1179955386">&quot;name&quot;:&quot;Site 8&quot;,</stringProp>
              <stringProp name="-1179954425">&quot;name&quot;:&quot;Site 9&quot;,</stringProp>
              <stringProp name="2075893349">&quot;name&quot;:&quot;Site 10&quot;,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with old site ID using old REST API - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${DefaultSite-ID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with UUID - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;([^,:]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
//int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

String site1identifier = vars.get(&quot;site1ID&quot;);
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with invalid UUID - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites/e0e6f75b-e3e1-4c21</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - nextRecordsURL - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${NRURL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;([^,:]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site2ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;([^,:]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site3ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;([^,:]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);


//int siteOneid = Integer.parseInt(vars.get(&quot;site111ID&quot;));


// Build the expected JSON and print it out as a string
// First build the expectedSite object

String site1identifier = vars.get(&quot;site1ID&quot;);
String site2identifier = vars.get(&quot;site2ID&quot;);
String site3identifier = vars.get(&quot;site3ID&quot;);

//int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

JsonObject site1 = new JsonObject();
site1.add(&quot;identifier&quot;, site1identifier);
site1.add(&quot;name&quot;, &quot;shikha&quot;);
site1.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site1.add(&quot;language&quot;, &quot;English&quot;);
site1.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
site1.add(&quot;cluster&quot;, &quot;&quot;);
site1.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
site1.add(&quot;address2&quot;, &quot;&quot;);
site1.add(&quot;city&quot;, &quot;San Ramon&quot;);
site1.add(&quot;state&quot;, &quot;California&quot;);
site1.add(&quot;country&quot;, &quot;United States&quot;);
site1.add(&quot;postalCode&quot;, &quot;94583&quot;);
site1.add(&quot;latitude&quot;, &quot;&quot;);
site1.add(&quot;longitude&quot;, &quot;&quot;);


//int site2identifier = Integer.parseInt(vars.get(&quot;site2ID&quot;));

JsonObject site2 = new JsonObject();
site2.add(&quot;identifier&quot;, site2identifier);
site2.add(&quot;name&quot;, &quot;site122&quot;);
site2.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site2.add(&quot;language&quot;, &quot;English&quot;);
site2.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
site2.add(&quot;cluster&quot;, &quot;&quot;);
site2.add(&quot;address1&quot;, &quot;&quot;);
site2.add(&quot;address2&quot;, &quot;&quot;);
site2.add(&quot;city&quot;, &quot;&quot;);
site2.add(&quot;state&quot;, &quot;&quot;);
site2.add(&quot;country&quot;, &quot;Australia&quot;);
site2.add(&quot;postalCode&quot;, &quot;&quot;);
site2.add(&quot;latitude&quot;, &quot;&quot;);
site2.add(&quot;longitude&quot;, &quot;&quot;);

//int site3identifier = Integer.parseInt(vars.get(&quot;site3ID&quot;));

JsonObject site3 = new JsonObject();
site3.add(&quot;identifier&quot;, site3identifier);
site3.add(&quot;name&quot;, &quot;Site 44&quot;);
site3.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site3.add(&quot;language&quot;, &quot;French&quot;);
site3.add(&quot;timezone&quot;, &quot;Canada/Pacific&quot;);
site3.add(&quot;cluster&quot;, &quot;&quot;);
site3.add(&quot;address1&quot;, &quot;1605&quot;);
site3.add(&quot;address2&quot;, &quot;153&quot;);
site3.add(&quot;city&quot;, &quot;Victoria&quot;);
site3.add(&quot;state&quot;, &quot;British Columbia&quot;);
site3.add(&quot;country&quot;, &quot;Canada&quot;);
site3.add(&quot;postalCode&quot;, &quot;&quot;);
site3.add(&quot;latitude&quot;, &quot;&quot;);
site3.add(&quot;longitude&quot;, &quot;&quot;);

JsonArray siteReturned = new JsonArray();
siteReturned.add(site1);
siteReturned.add(site2);
siteReturned.add(site3);


JsonObject SiteData= new JsonObject();
SiteData.add(&quot;total&quot;, &quot;103&quot;);
SiteData.add(&quot;nextRecordsURL&quot;, &quot;&quot;);
SiteData.add(&quot;sites&quot;, siteReturned);

log.info(&quot;Here is the expect JSON: &quot; + SiteData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(SiteData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site from another company is prohibited - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites/e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - User not Authenticated - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Unauthorized" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="785231124">Unauthorized</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - Unauthorized user - v.${version5}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Forbidden" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: GET /reapi/${version5}/sites/${DefaultSite-UUID}&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GETSitesByID - (Version: 2015-01-01) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460528107000</longProp>
        <longProp name="ThreadGroup.end_time">1460528107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 100" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site100ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">100</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NRURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Data Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-691626026">&quot;total&quot;:&quot;103&quot;</stringProp>
              <stringProp name="641961342">&quot;nextRecordsURL&quot;:&quot;/reapi/${version4}/sites?startAfterSite=${site100ID}&quot;</stringProp>
              <stringProp name="-1225651850">&quot;Default Site&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;language&quot;:&quot;English&quot;,&quot;timezone&quot;:&quot;Asia/Calcutta&quot;,&quot;cluster&quot;:&quot;&quot;,&quot;address1&quot;:&quot;sector 62&quot;,&quot;address2&quot;:&quot;noide&quot;,&quot;city&quot;:&quot;UP&quot;,&quot;state&quot;:&quot;&quot;,&quot;country&quot;:&quot;India&quot;,&quot;postalCode&quot;:&quot;4356&quot;,&quot;latitude&quot;:&quot;28.6197948&quot;,&quot;longitude&quot;:&quot;77.36115489999997&quot;}</stringProp>
              <stringProp name="-1179961152">&quot;name&quot;:&quot;Site 2&quot;,</stringProp>
              <stringProp name="-1179960191">&quot;name&quot;:&quot;Site 3&quot;,</stringProp>
              <stringProp name="-1179959230">&quot;name&quot;:&quot;Site 4&quot;,</stringProp>
              <stringProp name="-1179958269">&quot;name&quot;:&quot;Site 5&quot;,</stringProp>
              <stringProp name="-1179957308">&quot;name&quot;:&quot;Site 6&quot;,</stringProp>
              <stringProp name="-1179956347">&quot;name&quot;:&quot;Site 7&quot;,</stringProp>
              <stringProp name="-1179955386">&quot;name&quot;:&quot;Site 8&quot;,</stringProp>
              <stringProp name="-1179954425">&quot;name&quot;:&quot;Site 9&quot;,</stringProp>
              <stringProp name="2075893349">&quot;name&quot;:&quot;Site 10&quot;,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with ID - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${DefaultSite-ID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with invalid ID - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/200122200122</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site 200122200122 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - nextRecordsURL - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${NRURL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site2ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site3ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);


//int siteOneid = Integer.parseInt(vars.get(&quot;site111ID&quot;));


// Build the expected JSON and print it out as a string
// First build the expectedSite object

//String site1identifier = vars.get(&quot;site1ID&quot;);
//String site2identifier = vars.get(&quot;site2ID&quot;);
//String site3identifier = vars.get(&quot;site3ID&quot;);

int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

JsonObject site1 = new JsonObject();
site1.add(&quot;identifier&quot;, site1identifier);
site1.add(&quot;name&quot;, &quot;shikha&quot;);
site1.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site1.add(&quot;language&quot;, &quot;English&quot;);
site1.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
site1.add(&quot;cluster&quot;, &quot;&quot;);
site1.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
site1.add(&quot;address2&quot;, &quot;&quot;);
site1.add(&quot;city&quot;, &quot;San Ramon&quot;);
site1.add(&quot;state&quot;, &quot;California&quot;);
site1.add(&quot;country&quot;, &quot;United States&quot;);
site1.add(&quot;postalCode&quot;, &quot;94583&quot;);
site1.add(&quot;latitude&quot;, &quot;&quot;);
site1.add(&quot;longitude&quot;, &quot;&quot;);


int site2identifier = Integer.parseInt(vars.get(&quot;site2ID&quot;));

JsonObject site2 = new JsonObject();
site2.add(&quot;identifier&quot;, site2identifier);
site2.add(&quot;name&quot;, &quot;site122&quot;);
site2.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site2.add(&quot;language&quot;, &quot;English&quot;);
site2.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
site2.add(&quot;cluster&quot;, &quot;&quot;);
site2.add(&quot;address1&quot;, &quot;&quot;);
site2.add(&quot;address2&quot;, &quot;&quot;);
site2.add(&quot;city&quot;, &quot;&quot;);
site2.add(&quot;state&quot;, &quot;&quot;);
site2.add(&quot;country&quot;, &quot;Australia&quot;);
site2.add(&quot;postalCode&quot;, &quot;&quot;);
site2.add(&quot;latitude&quot;, &quot;&quot;);
site2.add(&quot;longitude&quot;, &quot;&quot;);

int site3identifier = Integer.parseInt(vars.get(&quot;site3ID&quot;));

JsonObject site3 = new JsonObject();
site3.add(&quot;identifier&quot;, site3identifier);
site3.add(&quot;name&quot;, &quot;Site 44&quot;);
site3.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site3.add(&quot;language&quot;, &quot;French&quot;);
site3.add(&quot;timezone&quot;, &quot;Canada/Pacific&quot;);
site3.add(&quot;cluster&quot;, &quot;&quot;);
site3.add(&quot;address1&quot;, &quot;1605&quot;);
site3.add(&quot;address2&quot;, &quot;153&quot;);
site3.add(&quot;city&quot;, &quot;Victoria&quot;);
site3.add(&quot;state&quot;, &quot;British Columbia&quot;);
site3.add(&quot;country&quot;, &quot;Canada&quot;);
site3.add(&quot;postalCode&quot;, &quot;&quot;);
site3.add(&quot;latitude&quot;, &quot;&quot;);
site3.add(&quot;longitude&quot;, &quot;&quot;);

JsonArray siteReturned = new JsonArray();
siteReturned.add(site1);
siteReturned.add(site2);
siteReturned.add(site3);


JsonObject SiteData= new JsonObject();
SiteData.add(&quot;total&quot;, &quot;103&quot;);
SiteData.add(&quot;nextRecordsURL&quot;, &quot;&quot;);
SiteData.add(&quot;sites&quot;, siteReturned);

log.info(&quot;Here is the expect JSON: &quot; + SiteData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(SiteData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site from another company is prohibited - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - User not Authenticated - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Unauthorized" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="785231124">Unauthorized</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - Unauthorized user - v.${version4}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version4}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Forbidden" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: GET /reapi/${version4}/sites/${DefaultSite-UUID}&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GETSitesByID - (Version: 2014-06-01) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460528107000</longProp>
        <longProp name="ThreadGroup.end_time">1460528107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 100" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site100ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">100</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NRURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Data Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-691626026">&quot;total&quot;:&quot;103&quot;</stringProp>
              <stringProp name="312195581">&quot;nextRecordsURL&quot;:&quot;/reapi/${version3}/sites?startAfterSite=${site100ID}&quot;</stringProp>
              <stringProp name="-1225651850">&quot;Default Site&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;language&quot;:&quot;English&quot;,&quot;timezone&quot;:&quot;Asia/Calcutta&quot;,&quot;cluster&quot;:&quot;&quot;,&quot;address1&quot;:&quot;sector 62&quot;,&quot;address2&quot;:&quot;noide&quot;,&quot;city&quot;:&quot;UP&quot;,&quot;state&quot;:&quot;&quot;,&quot;country&quot;:&quot;India&quot;,&quot;postalCode&quot;:&quot;4356&quot;,&quot;latitude&quot;:&quot;28.6197948&quot;,&quot;longitude&quot;:&quot;77.36115489999997&quot;}</stringProp>
              <stringProp name="-1179961152">&quot;name&quot;:&quot;Site 2&quot;,</stringProp>
              <stringProp name="-1179960191">&quot;name&quot;:&quot;Site 3&quot;,</stringProp>
              <stringProp name="-1179959230">&quot;name&quot;:&quot;Site 4&quot;,</stringProp>
              <stringProp name="-1179958269">&quot;name&quot;:&quot;Site 5&quot;,</stringProp>
              <stringProp name="-1179957308">&quot;name&quot;:&quot;Site 6&quot;,</stringProp>
              <stringProp name="-1179956347">&quot;name&quot;:&quot;Site 7&quot;,</stringProp>
              <stringProp name="-1179955386">&quot;name&quot;:&quot;Site 8&quot;,</stringProp>
              <stringProp name="-1179954425">&quot;name&quot;:&quot;Site 9&quot;,</stringProp>
              <stringProp name="2075893349">&quot;name&quot;:&quot;Site 10&quot;,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with ID - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${DefaultSite-ID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with invalid ID - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/200122200122</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site 200122200122 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - nextRecordsURL - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${NRURL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site2ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site3ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);


//int siteOneid = Integer.parseInt(vars.get(&quot;site111ID&quot;));


// Build the expected JSON and print it out as a string
// First build the expectedSite object

//String site1identifier = vars.get(&quot;site1ID&quot;);
//String site2identifier = vars.get(&quot;site2ID&quot;);
//String site3identifier = vars.get(&quot;site3ID&quot;);

int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

JsonObject site1 = new JsonObject();
site1.add(&quot;identifier&quot;, site1identifier);
site1.add(&quot;name&quot;, &quot;shikha&quot;);
site1.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site1.add(&quot;language&quot;, &quot;English&quot;);
site1.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
site1.add(&quot;cluster&quot;, &quot;&quot;);
site1.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
site1.add(&quot;address2&quot;, &quot;&quot;);
site1.add(&quot;city&quot;, &quot;San Ramon&quot;);
site1.add(&quot;state&quot;, &quot;California&quot;);
site1.add(&quot;country&quot;, &quot;United States&quot;);
site1.add(&quot;postalCode&quot;, &quot;94583&quot;);
site1.add(&quot;latitude&quot;, &quot;&quot;);
site1.add(&quot;longitude&quot;, &quot;&quot;);


int site2identifier = Integer.parseInt(vars.get(&quot;site2ID&quot;));

JsonObject site2 = new JsonObject();
site2.add(&quot;identifier&quot;, site2identifier);
site2.add(&quot;name&quot;, &quot;site122&quot;);
site2.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site2.add(&quot;language&quot;, &quot;English&quot;);
site2.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
site2.add(&quot;cluster&quot;, &quot;&quot;);
site2.add(&quot;address1&quot;, &quot;&quot;);
site2.add(&quot;address2&quot;, &quot;&quot;);
site2.add(&quot;city&quot;, &quot;&quot;);
site2.add(&quot;state&quot;, &quot;&quot;);
site2.add(&quot;country&quot;, &quot;Australia&quot;);
site2.add(&quot;postalCode&quot;, &quot;&quot;);
site2.add(&quot;latitude&quot;, &quot;&quot;);
site2.add(&quot;longitude&quot;, &quot;&quot;);

int site3identifier = Integer.parseInt(vars.get(&quot;site3ID&quot;));

JsonObject site3 = new JsonObject();
site3.add(&quot;identifier&quot;, site3identifier);
site3.add(&quot;name&quot;, &quot;Site 44&quot;);
site3.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site3.add(&quot;language&quot;, &quot;French&quot;);
site3.add(&quot;timezone&quot;, &quot;Canada/Pacific&quot;);
site3.add(&quot;cluster&quot;, &quot;&quot;);
site3.add(&quot;address1&quot;, &quot;1605&quot;);
site3.add(&quot;address2&quot;, &quot;153&quot;);
site3.add(&quot;city&quot;, &quot;Victoria&quot;);
site3.add(&quot;state&quot;, &quot;British Columbia&quot;);
site3.add(&quot;country&quot;, &quot;Canada&quot;);
site3.add(&quot;postalCode&quot;, &quot;&quot;);
site3.add(&quot;latitude&quot;, &quot;&quot;);
site3.add(&quot;longitude&quot;, &quot;&quot;);

JsonArray siteReturned = new JsonArray();
siteReturned.add(site1);
siteReturned.add(site2);
siteReturned.add(site3);


JsonObject SiteData= new JsonObject();
SiteData.add(&quot;total&quot;, &quot;103&quot;);
SiteData.add(&quot;nextRecordsURL&quot;, &quot;&quot;);
SiteData.add(&quot;sites&quot;, siteReturned);

log.info(&quot;Here is the expect JSON: &quot; + SiteData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(SiteData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site from another company is prohibited - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - User not Authenticated - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Unauthorized" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="785231124">Unauthorized</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - Unauthorized user - v.${version3}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version3}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Forbidden" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: GET /reapi/${version3}/sites/${DefaultSite-UUID}&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GETSitesByID - (Version: 2013-12-01) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460528107000</longProp>
        <longProp name="ThreadGroup.end_time">1460528107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 100" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site100ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">100</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NRURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Data Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-691626026">&quot;total&quot;:&quot;103&quot;</stringProp>
              <stringProp name="-17570180">&quot;nextRecordsURL&quot;:&quot;/reapi/${version2}/sites?startAfterSite=${site100ID}&quot;</stringProp>
              <stringProp name="-1225651850">&quot;Default Site&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;language&quot;:&quot;English&quot;,&quot;timezone&quot;:&quot;Asia/Calcutta&quot;,&quot;cluster&quot;:&quot;&quot;,&quot;address1&quot;:&quot;sector 62&quot;,&quot;address2&quot;:&quot;noide&quot;,&quot;city&quot;:&quot;UP&quot;,&quot;state&quot;:&quot;&quot;,&quot;country&quot;:&quot;India&quot;,&quot;postalCode&quot;:&quot;4356&quot;,&quot;latitude&quot;:&quot;28.6197948&quot;,&quot;longitude&quot;:&quot;77.36115489999997&quot;}</stringProp>
              <stringProp name="-1179961152">&quot;name&quot;:&quot;Site 2&quot;,</stringProp>
              <stringProp name="-1179960191">&quot;name&quot;:&quot;Site 3&quot;,</stringProp>
              <stringProp name="-1179959230">&quot;name&quot;:&quot;Site 4&quot;,</stringProp>
              <stringProp name="-1179958269">&quot;name&quot;:&quot;Site 5&quot;,</stringProp>
              <stringProp name="-1179957308">&quot;name&quot;:&quot;Site 6&quot;,</stringProp>
              <stringProp name="-1179956347">&quot;name&quot;:&quot;Site 7&quot;,</stringProp>
              <stringProp name="-1179955386">&quot;name&quot;:&quot;Site 8&quot;,</stringProp>
              <stringProp name="-1179954425">&quot;name&quot;:&quot;Site 9&quot;,</stringProp>
              <stringProp name="2075893349">&quot;name&quot;:&quot;Site 10&quot;,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with ID - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${DefaultSite-ID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with invalid ID - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/200122200122</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site 200122200122 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - nextRecordsURL - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${NRURL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site2ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site3ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);


//int siteOneid = Integer.parseInt(vars.get(&quot;site111ID&quot;));


// Build the expected JSON and print it out as a string
// First build the expectedSite object

//String site1identifier = vars.get(&quot;site1ID&quot;);
//String site2identifier = vars.get(&quot;site2ID&quot;);
//String site3identifier = vars.get(&quot;site3ID&quot;);

int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

JsonObject site1 = new JsonObject();
site1.add(&quot;identifier&quot;, site1identifier);
site1.add(&quot;name&quot;, &quot;shikha&quot;);
site1.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site1.add(&quot;language&quot;, &quot;English&quot;);
site1.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
site1.add(&quot;cluster&quot;, &quot;&quot;);
site1.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
site1.add(&quot;address2&quot;, &quot;&quot;);
site1.add(&quot;city&quot;, &quot;San Ramon&quot;);
site1.add(&quot;state&quot;, &quot;California&quot;);
site1.add(&quot;country&quot;, &quot;United States&quot;);
site1.add(&quot;postalCode&quot;, &quot;94583&quot;);
site1.add(&quot;latitude&quot;, &quot;&quot;);
site1.add(&quot;longitude&quot;, &quot;&quot;);


int site2identifier = Integer.parseInt(vars.get(&quot;site2ID&quot;));

JsonObject site2 = new JsonObject();
site2.add(&quot;identifier&quot;, site2identifier);
site2.add(&quot;name&quot;, &quot;site122&quot;);
site2.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site2.add(&quot;language&quot;, &quot;English&quot;);
site2.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
site2.add(&quot;cluster&quot;, &quot;&quot;);
site2.add(&quot;address1&quot;, &quot;&quot;);
site2.add(&quot;address2&quot;, &quot;&quot;);
site2.add(&quot;city&quot;, &quot;&quot;);
site2.add(&quot;state&quot;, &quot;&quot;);
site2.add(&quot;country&quot;, &quot;Australia&quot;);
site2.add(&quot;postalCode&quot;, &quot;&quot;);
site2.add(&quot;latitude&quot;, &quot;&quot;);
site2.add(&quot;longitude&quot;, &quot;&quot;);

int site3identifier = Integer.parseInt(vars.get(&quot;site3ID&quot;));

JsonObject site3 = new JsonObject();
site3.add(&quot;identifier&quot;, site3identifier);
site3.add(&quot;name&quot;, &quot;Site 44&quot;);
site3.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site3.add(&quot;language&quot;, &quot;French&quot;);
site3.add(&quot;timezone&quot;, &quot;Canada/Pacific&quot;);
site3.add(&quot;cluster&quot;, &quot;&quot;);
site3.add(&quot;address1&quot;, &quot;1605&quot;);
site3.add(&quot;address2&quot;, &quot;153&quot;);
site3.add(&quot;city&quot;, &quot;Victoria&quot;);
site3.add(&quot;state&quot;, &quot;British Columbia&quot;);
site3.add(&quot;country&quot;, &quot;Canada&quot;);
site3.add(&quot;postalCode&quot;, &quot;&quot;);
site3.add(&quot;latitude&quot;, &quot;&quot;);
site3.add(&quot;longitude&quot;, &quot;&quot;);

JsonArray siteReturned = new JsonArray();
siteReturned.add(site1);
siteReturned.add(site2);
siteReturned.add(site3);


JsonObject SiteData= new JsonObject();
SiteData.add(&quot;total&quot;, &quot;103&quot;);
SiteData.add(&quot;nextRecordsURL&quot;, &quot;&quot;);
SiteData.add(&quot;sites&quot;, siteReturned);

log.info(&quot;Here is the expect JSON: &quot; + SiteData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(SiteData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site from another company is prohibited - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - User not Authenticated - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Unauthorized" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="785231124">Unauthorized</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - Unauthorized user - v.${version2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version2}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Forbidden" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: GET /reapi/${version2}/sites/${DefaultSite-UUID}&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GETSitesByID - (Version: 2012-03-01) " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460528107000</longProp>
        <longProp name="ThreadGroup.end_time">1460528107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Happy Case - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 100" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site100ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">100</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NRURL</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops&quot;nextRecordsURL&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Data Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-691626026">&quot;total&quot;:&quot;103&quot;</stringProp>
              <stringProp name="-1103888935">&quot;nextRecordsURL&quot;:&quot;${protocol}://${host}/reapi/${version1}/sites?startAfterSite=${site100ID}&quot;</stringProp>
              <stringProp name="-1225651850">&quot;Default Site&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;language&quot;:&quot;English&quot;,&quot;timezone&quot;:&quot;Asia/Calcutta&quot;,&quot;cluster&quot;:&quot;&quot;,&quot;address1&quot;:&quot;sector 62&quot;,&quot;address2&quot;:&quot;noide&quot;,&quot;city&quot;:&quot;UP&quot;,&quot;state&quot;:&quot;&quot;,&quot;country&quot;:&quot;India&quot;,&quot;postalCode&quot;:&quot;4356&quot;,&quot;latitude&quot;:&quot;28.6197948&quot;,&quot;longitude&quot;:&quot;77.36115489999997&quot;}</stringProp>
              <stringProp name="-1179961152">&quot;name&quot;:&quot;Site 2&quot;,</stringProp>
              <stringProp name="-1179960191">&quot;name&quot;:&quot;Site 3&quot;,</stringProp>
              <stringProp name="-1179959230">&quot;name&quot;:&quot;Site 4&quot;,</stringProp>
              <stringProp name="-1179958269">&quot;name&quot;:&quot;Site 5&quot;,</stringProp>
              <stringProp name="-1179957308">&quot;name&quot;:&quot;Site 6&quot;,</stringProp>
              <stringProp name="-1179956347">&quot;name&quot;:&quot;Site 7&quot;,</stringProp>
              <stringProp name="-1179955386">&quot;name&quot;:&quot;Site 8&quot;,</stringProp>
              <stringProp name="-1179954425">&quot;name&quot;:&quot;Site 9&quot;,</stringProp>
              <stringProp name="2075893349">&quot;name&quot;:&quot;Site 10&quot;,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with ID - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${DefaultSite-ID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;
String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string
//String storedId = vars.get(&quot;siteidentifier&quot;);
JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
// First build the expectedSite object
int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));
JsonObject expectedSite = new JsonObject();
expectedSite.add(&quot;identifier&quot;, site1identifier);
expectedSite.add(&quot;name&quot;, &quot;Default Site&quot;);
expectedSite.add(&quot;status&quot;, &quot;ACTIVE&quot;);
expectedSite.add(&quot;language&quot;, &quot;English&quot;);
expectedSite.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
expectedSite.add(&quot;cluster&quot;, &quot;&quot;);
expectedSite.add(&quot;address1&quot;, &quot;sector 62&quot;);
expectedSite.add(&quot;address2&quot;, &quot;noide&quot;);
expectedSite.add(&quot;city&quot;, &quot;UP&quot;);
expectedSite.add(&quot;state&quot;, &quot;&quot;);
expectedSite.add(&quot;country&quot;, &quot;India&quot;);
expectedSite.add(&quot;postalCode&quot;, &quot;4356&quot;);
expectedSite.add(&quot;latitude&quot;, &quot;28.6197948&quot;);
expectedSite.add(&quot;longitude&quot;, &quot;77.36115489999997&quot;);


log.info(&quot;Here is the expect JSON: &quot; + expectedSite.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(expectedSite.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-1967612399">X-Rate-Limit-Resource: siteGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site with invalid ID - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/200122200122</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site 200122200122 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - nextRecordsURL - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${NRURL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site1ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site2ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor Site 3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">site3ID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:([^,:]+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Oops</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output JSON and print out as a string

JsonObject resultPerson = Json.parse(jsonString).asObject();
String resultText = resultPerson.toString();
log.info(&quot;Here is the output JSON: &quot; + resultText);


//int siteOneid = Integer.parseInt(vars.get(&quot;site111ID&quot;));


// Build the expected JSON and print it out as a string
// First build the expectedSite object

//String site1identifier = vars.get(&quot;site1ID&quot;);
//String site2identifier = vars.get(&quot;site2ID&quot;);
//String site3identifier = vars.get(&quot;site3ID&quot;);

int site1identifier = Integer.parseInt(vars.get(&quot;site1ID&quot;));

JsonObject site1 = new JsonObject();
site1.add(&quot;identifier&quot;, site1identifier);
site1.add(&quot;name&quot;, &quot;shikha&quot;);
site1.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site1.add(&quot;language&quot;, &quot;English&quot;);
site1.add(&quot;timezone&quot;, &quot;US/Pacific&quot;);
site1.add(&quot;cluster&quot;, &quot;&quot;);
site1.add(&quot;address1&quot;, &quot;12647 Alcosta Blvd&quot;);
site1.add(&quot;address2&quot;, &quot;&quot;);
site1.add(&quot;city&quot;, &quot;San Ramon&quot;);
site1.add(&quot;state&quot;, &quot;California&quot;);
site1.add(&quot;country&quot;, &quot;United States&quot;);
site1.add(&quot;postalCode&quot;, &quot;94583&quot;);
site1.add(&quot;latitude&quot;, &quot;&quot;);
site1.add(&quot;longitude&quot;, &quot;&quot;);


int site2identifier = Integer.parseInt(vars.get(&quot;site2ID&quot;));

JsonObject site2 = new JsonObject();
site2.add(&quot;identifier&quot;, site2identifier);
site2.add(&quot;name&quot;, &quot;site122&quot;);
site2.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site2.add(&quot;language&quot;, &quot;English&quot;);
site2.add(&quot;timezone&quot;, &quot;Asia/Calcutta&quot;);
site2.add(&quot;cluster&quot;, &quot;&quot;);
site2.add(&quot;address1&quot;, &quot;&quot;);
site2.add(&quot;address2&quot;, &quot;&quot;);
site2.add(&quot;city&quot;, &quot;&quot;);
site2.add(&quot;state&quot;, &quot;&quot;);
site2.add(&quot;country&quot;, &quot;Australia&quot;);
site2.add(&quot;postalCode&quot;, &quot;&quot;);
site2.add(&quot;latitude&quot;, &quot;&quot;);
site2.add(&quot;longitude&quot;, &quot;&quot;);

int site3identifier = Integer.parseInt(vars.get(&quot;site3ID&quot;));

JsonObject site3 = new JsonObject();
site3.add(&quot;identifier&quot;, site3identifier);
site3.add(&quot;name&quot;, &quot;Site 44&quot;);
site3.add(&quot;status&quot;, &quot;ACTIVE&quot;);
site3.add(&quot;language&quot;, &quot;French&quot;);
site3.add(&quot;timezone&quot;, &quot;Canada/Pacific&quot;);
site3.add(&quot;cluster&quot;, &quot;&quot;);
site3.add(&quot;address1&quot;, &quot;1605&quot;);
site3.add(&quot;address2&quot;, &quot;153&quot;);
site3.add(&quot;city&quot;, &quot;Victoria&quot;);
site3.add(&quot;state&quot;, &quot;British Columbia&quot;);
site3.add(&quot;country&quot;, &quot;Canada&quot;);
site3.add(&quot;postalCode&quot;, &quot;&quot;);
site3.add(&quot;latitude&quot;, &quot;&quot;);
site3.add(&quot;longitude&quot;, &quot;&quot;);

JsonArray siteReturned = new JsonArray();
siteReturned.add(site1);
siteReturned.add(site2);
siteReturned.add(site3);


JsonObject SiteData= new JsonObject();
SiteData.add(&quot;total&quot;, &quot;103&quot;);
SiteData.add(&quot;nextRecordsURL&quot;, &quot;&quot;);
SiteData.add(&quot;sites&quot;, siteReturned);

log.info(&quot;Here is the expect JSON: &quot; + SiteData.toString());

// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(SiteData.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1856879287">X-Rate-Limit-Limit: 99</stringProp>
              <stringProp name="369876911">X-Rate-Limit-Org-Name: runscope-auto</stringProp>
              <stringProp name="-865160600">X-Rate-Limit-Resource: sitesGet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Site from another company is prohibited - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 404" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Not Found" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1786305461">Not Found</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;NOT_FOUND_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;Site e0e6f75b-e3e1-4c21-af2e-2b08dc5625f5 does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - User not Authenticated - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;admin:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 401" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51509">401</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Unauthorized" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="785231124">Unauthorized</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User could not be authenticated because the username or password is incorrect, the user does not exist in the targeted Company, or the Company does not exist.&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Sites - Unauthorized user - v.${version1}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${portt}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version1}/sites/${DefaultSite-UUID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.util.Base64Encoder;
import org.apache.jmeter.protocol.http.control.Header;

//Override auth header with invalid value
sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
String encodedCredentials = Base64Encoder.encode(&quot;standard:test&quot;);
log.info(&quot;Encoded creds: &quot; + encodedCredentials);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Basic &quot; + encodedCredentials));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 403" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51511">403</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: Forbidden" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-787432487">Forbidden</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();

// Grab output message and print out as a string
JsonObject resultMsg = Json.parse(jsonString).asObject();
String resultText = resultMsg.toString();
log.info(&quot;Here is the result JSON: &quot; + resultText);

// Build the expected JSON and print it out as a string
JsonObject expectedMsg = new JsonObject();
expectedMsg.add(&quot;type&quot;, &quot;UNAUTHORIZED_ACCESS_ERROR&quot;);
expectedMsg.add(&quot;message&quot;, &quot;User does not have the permission to access this service/functionality: GET /reapi/${version1}/sites/${DefaultSite-UUID}&quot;);

log.info(&quot;Here is the expect JSON: &quot; + expectedMsg.toString());

// Check for object equivalence
/*if (!expectedMsg.equals(resultMsg)) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON&quot;;	
}*/

JSONCompareResult result = JSONCompare.compareJSON(expectedMsg.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
